const mongoose = require('mongoose');
mongoose.Promise = global.Promise;
const slug = require('slugs');

const brewerySchema = new mongoose.Schema({
    name: {
        type: String,
        trim: true, //trims uploaded strings before adding to the db
        required: 'Please enter a brewery name!' // could also just put true, however it is better to put an error msg like this
    },
    slug: String,
    website: String,
    description: {
        type: String,
        trim: true,
    },
    tags: [String],
    created: {
        type: Date,
        default: Date.now,
    },
    beers: [{
        type: mongoose.Schema.ObjectId,
        ref: 'Beer',
    }],
    location: {
        type: {
            type: String,
            default: 'Point',
        },
        coordinates: [Number],
        address: String,
    },
    photos: [String],
    completed: {
        type: Boolean,
        default: false
    },
    updateCount: Number,
    lastModified: Date,

    // author: {
    //     type: mongoose.Schema.ObjectId,
    //     ref: 'User',
    //     required: 'You must supply an author'
    // },
},
// add additional option to display virtual fields (like our reviews field) when displaying Brewery data in JSON or as objects.
// without this, virtual fields would still be present, but they wouldn't be displayed when using res.json(), for example. 
{
    toJSON: { virtuals: true },
    toObject: { virtuals: true },
});

// generate a unique slug from the name
async function setSlug(next) {
    if (this.slug === slug(this.name)) return next();
    this.slug = slug(this.name);
    // before we save a new Brewery with this name, check to see if any other breweries with that name already exist in database
    // this is important bc the slug is generated by the name, and the slug is used in the URLs for the indivudal Brewery pages.  So, if the
    // name is the same and the slug is the same, then all breweries with the same name will point to the same URL.
    // So... find all the breweries with the same name and add a number to the end of the slug to make it unique. 
    const slugRegEx = new RegExp(`^(${this.slug})((-[0-9]*$)?)$`, 'i');
    const existingObjsWithSlug = await this.constructor.find({ slug: slugRegEx });
    
    if (existingObjsWithSlug.length) {
        this.slug = `${this.slug}-${existingObjsWithSlug.length + 1}`;
    }

    next();
}

// mongodb indexes:
brewerySchema.index({
    name: 'text',
    description: 'text',
    address: 'text'
});

// populates a field that field that references another models ObjectId with the full data
function autoPopulate(next) {
    this.populate('beers');
    next();
}

brewerySchema.pre('find', autoPopulate);
brewerySchema.pre('findOne', autoPopulate);

brewerySchema.pre('save', setSlug);

module.exports = mongoose.model('Brewery', brewerySchema);