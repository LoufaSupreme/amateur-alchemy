mixin beerForm(beer = {})
    form(action=`/new/${beer._id || ''}` method="POST" class="form-card" enctype="multipart/form-data")
        .form-card__section.main
            h2.form-card__section--heading Identity
            label(for="name") Name 
            input(type="text" name="name" required value=beer.name data-test="testing")

            label(for="brewery") Brewery
            .search-area
                input(type="text" id="brewery-name-input" required name="brewery-name" value=beer.brewery && beer.brewery.name) 
                .search-area__results 

            //- hidden input form to store an existing breweries _id
            //- this gets autofilled when user clicks on brewery dropdown from addBeer.js
            input(type="hidden" id="brewery-hidden" required name="brewery" value=beer.brewery && beer.brewery._id) 

            label(for="bjcp-style") Style
            input(type="text" name="bjcp_style" value=beer.bjcp_style)

            label(for="description") Description 
            textarea(name="description") #{beer.description}

            //- video upload
            label(for="video") Video 
            input(type="file" name="video" id="video" accept='.mp4,.webm,.avi,.mpeg,.flv,.mov,.3gp')

            //- image upload
            label(for="photos") Photos 
            input(type="file" name="photos" id="photo" accept="image/gif, image/png, image/jpeg" multiple)
            if beer.photos
                .img-gallery
                    each photo of beer.photos
                        img.gallery-img(src=`/uploads/${photo}`, alt=beer.name width=100)
        
        .form-card__section.specs
            h2.form-card__section--heading Specs
            label(for="abv") ABV
            input(type="number" id="abv" name="abv" step="any" value=beer.abv)

            label(for="ibu_reported") IBU (Reported)
            input(type="number" id="ibu_reported" name="ibu_reported" step="any" value=beer.ibu_reported)

            label(for="ibu_measured") IBU (Measured)
            input(type="number" id="ibu_measured" name="ibu_measured" step="any" value=beer.ibu_measured)

            label(for="pH") pH
            input(type="number" id="pH" name="pH" step="any" value=beer.pH)

            label(for="final_gravity") Final Gravity
            input(type="number" id="final_gravity" name="final_gravity" step="any" value=beer.final_gravity && beer.final_gravity.toFixed(3))

            label(for="srm") SRM
            input(type="number" id="srm" name="srm" step="any" value=beer.srm)


        .form-card__section.wide
            h2.form-card__section--heading BJCP
            label(for="rating[aroma][description]") Aroma:
                input(type="number" name="rating[aroma][score]" class="score-input" value=beer.rating && beer.rating.aroma.score) 
                span / 12
            span.comment Malt, hops, esters and other aromatics
            textarea(name="rating[aroma][description]" placeholder="Describe the aroma...") #{beer.rating && beer.rating.aroma.description}

            label(for="rating[appearance][description]") Appearance:
                input(type="number" name="rating[appearance][score]" class="score-input" value=beer.rating && beer.rating.appearance.score)
                span / 3
            span.comment Color, clarity and head (retention, colour, texture)
            textarea(name="rating[appearance][description]" placeholder="Describe the appearance...") #{beer.rating && beer.rating.appearance.description}

            label(for="rating[flavor][description]") Flavour:
                input(type="number" name="rating[flavor][score]" class="score-input" value=beer.rating && beer.rating.flavor.score)
                span / 20
            span.comment Malt, hops, fermentation characteristics, balance, finish/aftertaste, and other flavor characteristics
            textarea(name="rating[flavor][description]" placeholder="Describe the flavor...") #{beer.rating && beer.rating.flavor.description}

            label(for="rating[mouthfeel][description]") Mouthfeel:
                input(type="number" name="rating[mouthfeel][score]" class="score-input" value=beer.rating && beer.rating.mouthfeel.score)
                span / 5
            span.comment Body, carbonation, warmth, creaminess, astringency, and other palate sensations
            textarea(name="rating[mouthfeel][description]" placeholder="Describe the mouthfeel...") #{beer.rating && beer.rating.mouthfeel.description}

            label(for="rating[overall][description]") Overall:
                input(type="number" name="rating[overall][score]" class="score-input" value= beer.rating && beer.rating.overall.score)
                span / 10
            span.comment Overall drinking pleasure and give suggestions for improvement
            textarea(name="rating[overall][description]" placeholder="Overall impressions...") #{beer.rating && beer.rating.overall.description}

        .form-card__section.attrs
            h2.form-card__section--heading Perceived Attributes
            for [key, val] of Object.entries(schema.attributes)
                .attr-selection 
                    label(for=`attributes[${key}]`)= val.name
                    select(name=`attributes[${key}]` id=val.name class="attr-input" data-label=val.chart_label)
                        option(value=null disabled selected=Object.keys(beer).length===0 || beer.attributes[key] == null) Select perceived level
                        option(value=1 selected=beer.attributes && beer.attributes[key] == 1) 1 - Extremely Low
                        option(value=2 selected=beer.attributes && beer.attributes[key] == 2) 2 - Low
                        option(value=3 selected=beer.attributes && beer.attributes[key] == 3) 3 - Moderate
                        option(value=4 selected=beer.attributes && beer.attributes[key] == 4) 4 - High
                        option(value=5 selected=beer.attributes && beer.attributes[key] == 5) 5 - Very high
                        option(value=6 selected=beer.attributes && beer.attributes[key] == 6) 6 - Insane

        .form-card__section.tags
            h2.form-card__section--heading Tags 
            textarea(name="tags" id='tags-input')= beer.tags && beer.tags.join(', ')

        input(type="submit" value="Save" class="button")