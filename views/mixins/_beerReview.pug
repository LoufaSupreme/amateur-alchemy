mixin beerReview(beer)
    //- pre= h.dump(beer)
    .review-container
        .identity
            .name-container 
                h1.name= beer.name
                h2.brewery= beer.brewery 
                h3.style= beer.bjcp_style 
                .date= h.moment(beer.created).format("MMM Qo, YYYY")
                - const overallScore = Object.values(beer.rating).reduce((acc, curr) => {return acc += curr.score==null ? 0 : curr.score}, 0);
            .score-container 
                .outer-circle 
                    .inner-circle
                    .segment.segment-se
                    .segment.segment-sw
                    .segment.segment-nw
                    .segment.segment-ne
                .score(data-score=overallScore*2)= '0%'
        
        .review-img-container
            img.showcase-img(src=`/uploads/${beer.photos[0]}`, alt=beer.name)
            .img-gallery 
                each photo in beer.photos
                    img.gallery-img(src=`/uploads/${photo}`, alt=beer.name)
            .aux-specs
                if beer.abv
                    .aux-specs__spec
                        span.aux-specs__spec--title ABV:
                        span.aux-specs__spec--value= `${beer.abv}%`
                if beer.ph
                    .aux-specs__spec
                        span.aux-specs__spec--title pH: 
                        span.aux-specs__spec--value= beer.pH
                if beer.ibu_reported
                    .aux-specs__spec
                        .aux-specs__spec--title-container
                            span.aux-specs__spec--title IBU:
                            span.aux-specs__spec--subtitle REPORTED
                        span.aux-specs__spec--value= beer.ibu_reported
                if beer.ibu_measured
                    .aux-specs__spec
                        .aux-specs__spec--title-container
                            span.aux-specs__spec--title IBU:
                            span.aux-specs__spec--subtitle MEASURED
                        span.aux-specs__spec--value= beer.ibu_measured
                if beer.final_gravity
                    .aux-specs__spec
                        span.aux-specs__spec--title FG:
                        span.aux-specs__spec--value= beer.final_gravity
                if beer.srm
                    .aux-specs__spec
                        span.aux-specs__spec--title SRM:
                        span.aux-specs__spec--value= beer.srm
            
        .ratings 
            .brewer-notes
                h2.brewer-notes__title Brewer's Notes
                .brewer-notes__content.textbox= beer.description

            h2.brewer-notes__title.tasting Tasting Notes    
            each section in Object.entries(beer.rating)
                .ratings__section 
                    .ratings__section--title 
                        .ratings__section--subtitle= h.capitalizeFirst(section[0])
                        .ratings__section--score= `${section[1].score} / ${section[1].max_score}`
                    .ratings__section--content.textbox= section[1].description
        
        if beer.tags
            .tags= `Tags: ${beer.tags.map(tag=>h.capitalizeFirst(tag)).join(', ')}`

    script.
        // draw score bar: 
        const se = document.querySelector('.segment-se'); 
        const sw = document.querySelector('.segment-sw');
        const ne = document.querySelector('.segment-ne');
        const nw = document.querySelector('.segment-nw');

        const score = document.querySelector('.score');

        // all segments start at skew(90) which is not visible
        const targetScore = +score.dataset.score;
        let currentScore = parseFloat(score.innerText.slice(0, -1));

        function setGauge(score) {
            if (score >= 75) {
                se.style.setProperty('--skew', '0deg');
                sw.style.setProperty('--skew', '0deg');
                nw.style.setProperty('--skew', '0deg');
                ne.style.setProperty('--skew', `${90-((score-75)/25*90)}deg`);
            }
            else if (score >= 50) {
                se.style.setProperty('--skew', '0deg');
                sw.style.setProperty('--skew', '0deg');
                nw.style.setProperty('--skew', `${90-((score-50)/25*90)}deg`);
            }
            else if (score >= 25) {
                se.style.setProperty('--skew', '0deg');
                sw.style.setProperty('--skew', `${90-((score-25)/25*90)}deg`);
            }
            else {
                se.style.setProperty('--skew', `${90-((score)/25*90)}deg`);
            }
        }

        // linearly maps value from the range (a..b) to (c..d)
        function mapRange (value, a, b, c, d) {
            // first map value from (a..b) to (0..1)
            value = (value - a) / (b - a);
            // then map it from (0..1) to (c..d) and return it
            return c + value * (d - c);
        }

        function updateScore(speed) {
            if (currentScore < targetScore) {
                score.innerText = `${currentScore+1}%`;
                currentScore = parseFloat(score.innerText.slice(0, -1));
                setGauge(currentScore);

                delay = mapRange(currentScore, 0, targetScore, 0, speed);
                
                //- const newDelay = delay;
                setTimeout(() => {
                    updateScore(speed);
                }, delay);
            }
        }

        updateScore(50);

        // image gallery
        const gallery = document.querySelector('.img-gallery');
        const galleryImgs = gallery.querySelectorAll('img');
        const showcaseImg = document.querySelector('.showcase-img');

        function handleImgClick(e) {
            galleryImgs.forEach(img => img.classList.remove('active'));
            e.target.classList.add('active');
            showcaseImg.src = e.target.src;
        }

        galleryImgs.forEach(img => img.addEventListener('click', handleImgClick));

